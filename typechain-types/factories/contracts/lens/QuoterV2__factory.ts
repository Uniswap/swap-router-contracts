/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  QuoterV2,
  QuoterV2Interface,
} from "../../../contracts/lens/QuoterV2";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "_WETH9",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "WETH9",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "path",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "quoteExactInput",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "uint160[]",
        name: "sqrtPriceX96AfterList",
        type: "uint160[]",
      },
      {
        internalType: "uint32[]",
        name: "initializedTicksCrossedList",
        type: "uint32[]",
      },
      {
        internalType: "uint256",
        name: "gasEstimate",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
        ],
        internalType: "struct IQuoterV2.QuoteExactInputSingleParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "quoteExactInputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "uint160",
        name: "sqrtPriceX96After",
        type: "uint160",
      },
      {
        internalType: "uint32",
        name: "initializedTicksCrossed",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "gasEstimate",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "path",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    name: "quoteExactOutput",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint160[]",
        name: "sqrtPriceX96AfterList",
        type: "uint160[]",
      },
      {
        internalType: "uint32[]",
        name: "initializedTicksCrossedList",
        type: "uint32[]",
      },
      {
        internalType: "uint256",
        name: "gasEstimate",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
        ],
        internalType: "struct IQuoterV2.QuoteExactOutputSingleParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "quoteExactOutputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint160",
        name: "sqrtPriceX96After",
        type: "uint160",
      },
      {
        internalType: "uint32",
        name: "initializedTicksCrossed",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "gasEstimate",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "amount0Delta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "amount1Delta",
        type: "int256",
      },
      {
        internalType: "bytes",
        name: "path",
        type: "bytes",
      },
    ],
    name: "uniswapV3SwapCallback",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b5060405162001ca538038062001ca5833981016040819052620000349162000070565b6001600160601b0319606092831b8116608052911b1660a052620000a7565b80516001600160a01b03811681146200006b57600080fd5b919050565b6000806040838503121562000083578182fd5b6200008e8362000053565b91506200009e6020840162000053565b90509250929050565b60805160601c60a05160601c611bca620000db600039806102e05250806104d7528061083752806109ef5250611bca6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c45a01551161005b578063c45a0155146100e6578063c6a5026a146100ee578063cdca175314610101578063fa461e33146101145761007d565b80632f80bb1d146100825780634aa4a4fc146100ae578063bd21704a146100c3575b600080fd5b61009561009036600461170b565b610129565b6040516100a59493929190611a41565b60405180910390f35b6100b66102de565b6040516100a5919061199e565b6100d66100d1366004611829565b610302565b6040516100a59493929190611adc565b6100b66104d5565b6100d66100fc366004611829565b6104f9565b61009561010f36600461170b565b61066f565b610127610122366004611771565b610806565b005b6000606080600061013986610981565b67ffffffffffffffff8111801561014f57600080fd5b50604051908082528060200260200182016040528015610179578160200160208202803683370190505b50925061018586610981565b67ffffffffffffffff8111801561019b57600080fd5b506040519080825280602002602001820160405280156101c5578160200160208202803683370190505b50915060005b60008060006101d98a610992565b9250925092506000806000806102356040518060a00160405280886001600160a01b03168152602001896001600160a01b031681526020018f81526020018762ffffff16815260200160006001600160a01b0316815250610302565b9350935093509350828b898151811061024a57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050818a898151811061027757fe5b63ffffffff90921660209283029190910190910152929b50968201966001909601958b926102a48e6109c3565b156102b9576102b28e6109cb565b9d506102c9565b8c9b5050505050505050506102d5565b505050505050506101cb565b92959194509250565b7f000000000000000000000000000000000000000000000000000000000000000081565b6020810151815160608301516000928392839283926001600160a01b038082169084161092849261033392906109e8565b905086608001516001600160a01b0316600014156103545760408701516000555b60005a9050816001600160a01b031663128acb0830856103778c60400151610a26565b6000038c608001516001600160a01b0316600014610399578c608001516103bf565b876103b85773fffd8963efd1fc6a506488495d951d5263988d256103bf565b6401000276a45b8d602001518e606001518f600001516040516020016103e09392919061194b565b6040516020818303038152906040526040518663ffffffff1660e01b815260040161040f9594939291906119b2565b6040805180830381600087803b15801561042857600080fd5b505af1925050508015610458575060408051601f3d908101601f191682019092526104559181019061174e565b60015b6104c8573d808015610486576040519150601f19603f3d011682016040523d82523d6000602084013e61048b565b606091505b505a8203945088608001516001600160a01b0316600014156104ac57600080555b6104b7818487610a58565b9750975097509750505050506104ce565b50505050505b9193509193565b7f000000000000000000000000000000000000000000000000000000000000000081565b6020810151815160608301516000928392839283926001600160a01b038082169084161092849261052a92906109e8565b905060005a9050816001600160a01b031663128acb08308561054f8c60400151610a26565b60808d01516001600160a01b03161561056c578c60800151610592565b8761058b5773fffd8963efd1fc6a506488495d951d5263988d25610592565b6401000276a45b8d600001518e606001518f602001516040516020016105b39392919061194b565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016105e29594939291906119b2565b6040805180830381600087803b1580156105fb57600080fd5b505af192505050801561062b575060408051601f3d908101601f191682019092526106289181019061174e565b60015b6104c8573d808015610659576040519150601f19603f3d011682016040523d82523d6000602084013e61065e565b606091505b505a820394506104b7818487610a58565b6000606080600061067f86610981565b67ffffffffffffffff8111801561069557600080fd5b506040519080825280602002602001820160405280156106bf578160200160208202803683370190505b5092506106cb86610981565b67ffffffffffffffff811180156106e157600080fd5b5060405190808252806020026020018201604052801561070b578160200160208202803683370190505b50915060005b600080600061071f8a610992565b92509250925060008060008061077b6040518060a00160405280896001600160a01b03168152602001886001600160a01b031681526020018f81526020018762ffffff16815260200160006001600160a01b03168152506104f9565b9350935093509350828b898151811061079057fe5b60200260200101906001600160a01b031690816001600160a01b031681525050818a89815181106107bd57fe5b63ffffffff90921660209283029190910190910152929b50968201966001909601958b926107ea8e6109c3565b156102b9576107f88e6109cb565b9d5050505050505050610711565b60008313806108155750600082135b61081e57600080fd5b600080600061082c84610992565b92509250925061085e7f0000000000000000000000000000000000000000000000000000000000000000848484610b12565b50600080600080891361088a57856001600160a01b0316856001600160a01b031610888a6000036108a5565b846001600160a01b0316866001600160a01b03161089896000035b92509250925060006108b88787876109e8565b9050600080826001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156108f657600080fd5b505afa15801561090a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092e919061184b565b505050505091509150851561095457604051848152826020820152816040820152606081fd5b6000541561096a57600054841461096a57600080fd5b604051858152826020820152816040820152606081fd5b80516017601319909101045b919050565b600080806109a08482610b31565b92506109ad846014610bfd565b90506109ba846017610b31565b91509193909250565b516042111590565b80516060906109e290839060179060161901610cb9565b92915050565b6000610a1e7f0000000000000000000000000000000000000000000000000000000000000000610a19868686610e34565b610e8a565b949350505050565b60007f80000000000000000000000000000000000000000000000000000000000000008210610a5457600080fd5b5090565b600080600080600080876001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610a9a57600080fd5b505afa158015610aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad2919061184b565b50939650610ae794508d9350610f8692505050565b91975095509050610b026001600160a01b0389168383611013565b9350869250505093509350935093565b6000610b2885610b23868686610e34565b61159c565b95945050505050565b600081826014011015610b8b576040805162461bcd60e51b815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b8160140183511015610be4576040805162461bcd60e51b815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b600081826003011015610c57576040805162461bcd60e51b815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b8160030183511015610cb0576040805162461bcd60e51b815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f011015610d13576040805162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b828284011015610d6a576040805162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b81830184511015610dc2576040805162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b606082158015610de15760405191506000825260208201604052610e2b565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610e1a578051835260209283019201610e02565b5050858452601f01601f1916604052505b50949350505050565b610e3c6115da565b826001600160a01b0316846001600160a01b03161115610e5a579192915b50604080516060810182526001600160a01b03948516815292909316602083015262ffffff169181019190915290565b600081602001516001600160a01b031682600001516001600160a01b031610610eb257600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b6bffffffffffffffffffffffff191660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b60008060008351606014610ff257604484511015610fbf5760405162461bcd60e51b8152600401610fb690611a0a565b60405180910390fd5b60048401935083806020019051810190610fd991906117bf565b60405162461bcd60e51b8152600401610fb691906119f7565b8380602001905181019061100691906118e2565b9250925092509193909250565b60008060008060008060008060088b6001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561105a57600080fd5b505afa15801561106e573d6000803e3d6000fd5b505050506040513d602081101561108457600080fd5b5051600290810b908c900b8161109657fe5b0560020b901d905060006101008c6001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110dc57600080fd5b505afa1580156110f0573d6000803e3d6000fd5b505050506040513d602081101561110657600080fd5b5051600290810b908d900b8161111857fe5b0560020b8161112357fe5b079050600060088d6001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561116357600080fd5b505afa158015611177573d6000803e3d6000fd5b505050506040513d602081101561118d57600080fd5b5051600290810b908d900b8161119f57fe5b0560020b901d905060006101008e6001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111e557600080fd5b505afa1580156111f9573d6000803e3d6000fd5b505050506040513d602081101561120f57600080fd5b5051600290810b908e900b8161122157fe5b0560020b8161122c57fe5b07905060008160ff166001901b8f6001600160a01b0316635339c296856040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b15801561128057600080fd5b505afa158015611294573d6000803e3d6000fd5b505050506040513d60208110156112aa57600080fd5b50511611801561133057508d6001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112ee57600080fd5b505afa158015611302573d6000803e3d6000fd5b505050506040513d602081101561131857600080fd5b5051600290810b908d900b8161132a57fe5b0760020b155b801561134157508b60020b8d60020b135b945060008360ff166001901b8f6001600160a01b0316635339c296876040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b15801561139457600080fd5b505afa1580156113a8573d6000803e3d6000fd5b505050506040513d60208110156113be57600080fd5b50511611801561144457508d6001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561140257600080fd5b505afa158015611416573d6000803e3d6000fd5b505050506040513d602081101561142c57600080fd5b5051600290810b908e900b8161143e57fe5b0760020b155b801561145557508b60020b8d60020b125b95508160010b8460010b128061148157508160010b8460010b14801561148157508060ff168360ff1611155b15611497578399508297508198508096506114a4565b8199508097508398508296505b505060001960ff87161b9150505b8560010b8760010b13611574578560010b8760010b14156114d95760001960ff858103161c165b6000818c6001600160a01b0316635339c2968a6040518263ffffffff1660e01b8152600401808260010b815260200191505060206040518083038186803b15801561152357600080fd5b505afa158015611537573d6000803e3d6000fd5b505050506040513d602081101561154d57600080fd5b505116905061155b816115bf565b61ffff16989098019750506001909501946000196114b2565b8115611581576001880397505b821561158e576001880397505b505050505050509392505050565b60006115a88383610e8a565b9050336001600160a01b038216146109e257600080fd5b6000805b82156109e2576000198301909216916001016115c3565b604080516060810182526000808252602082018190529181019190915290565b600082601f83011261160a578081fd5b813561161d61161882611b2a565b611b06565b818152846020838601011115611631578283fd5b816020850160208301379081016020019190915292915050565b8051600281900b811461098d57600080fd5b600060a0828403121561166e578081fd5b60405160a0810181811067ffffffffffffffff8211171561168b57fe5b604052905080823561169c81611b7c565b815260208301356116ac81611b7c565b602082015260408381013590820152606083013562ffffff811681146116d157600080fd5b60608201526116e2608084016116ee565b60808201525092915050565b803561098d81611b7c565b805161ffff8116811461098d57600080fd5b6000806040838503121561171d578182fd5b823567ffffffffffffffff811115611733578283fd5b61173f858286016115fa565b95602094909401359450505050565b60008060408385031215611760578182fd5b505080516020909101519092909150565b600080600060608486031215611785578081fd5b8335925060208401359150604084013567ffffffffffffffff8111156117a9578182fd5b6117b5868287016115fa565b9150509250925092565b6000602082840312156117d0578081fd5b815167ffffffffffffffff8111156117e6578182fd5b8201601f810184136117f6578182fd5b805161180461161882611b2a565b818152856020838501011115611818578384fd5b610b28826020830160208601611b4c565b600060a0828403121561183a578081fd5b611844838361165d565b9392505050565b600080600080600080600060e0888a031215611865578283fd5b875161187081611b7c565b965061187e6020890161164b565b955061188c604089016116f9565b945061189a606089016116f9565b93506118a8608089016116f9565b925060a088015160ff811681146118bd578283fd5b60c089015190925080151581146118d2578182fd5b8091505092959891949750929550565b6000806000606084860312156118f6578081fd5b83519250602084015161190881611b7c565b91506119166040850161164b565b90509250925092565b60008151808452611937816020860160208601611b4c565b601f01601f19169290920160200192915050565b606093841b6bffffffffffffffffffffffff19908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b6001600160a01b0391909116815260200190565b60006001600160a01b038088168352861515602084015285604084015280851660608401525060a060808301526119ec60a083018461191f565b979650505050505050565b600060208252611844602083018461191f565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b600060808201868352602060808185015281875180845260a0860191508289019350845b81811015611a8a5784516001600160a01b031683529383019391830191600101611a65565b505084810360408601528651808252908201925081870190845b81811015611ac657825163ffffffff1685529383019391830191600101611aa4565b5050505060609290920192909252949350505050565b9384526001600160a01b0392909216602084015263ffffffff166040830152606082015260800190565b60405181810167ffffffffffffffff81118282101715611b2257fe5b604052919050565b600067ffffffffffffffff821115611b3e57fe5b50601f01601f191660200190565b60005b83811015611b67578181015183820152602001611b4f565b83811115611b76576000848401525b50505050565b6001600160a01b0381168114611b9157600080fd5b5056fea2646970667358221220dba77fc7aaffef629b3eaaa949c16c1e2f5a0fbb88167513494a5e1fdccd45e564736f6c63430007060033";

type QuoterV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: QuoterV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class QuoterV2__factory extends ContractFactory {
  constructor(...args: QuoterV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _factory: PromiseOrValue<string>,
    _WETH9: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<QuoterV2> {
    return super.deploy(_factory, _WETH9, overrides || {}) as Promise<QuoterV2>;
  }
  override getDeployTransaction(
    _factory: PromiseOrValue<string>,
    _WETH9: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_factory, _WETH9, overrides || {});
  }
  override attach(address: string): QuoterV2 {
    return super.attach(address) as QuoterV2;
  }
  override connect(signer: Signer): QuoterV2__factory {
    return super.connect(signer) as QuoterV2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): QuoterV2Interface {
    return new utils.Interface(_abi) as QuoterV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): QuoterV2 {
    return new Contract(address, _abi, signerOrProvider) as QuoterV2;
  }
}
