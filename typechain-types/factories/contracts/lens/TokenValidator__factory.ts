/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TokenValidator,
  TokenValidatorInterface,
} from "../../../contracts/lens/TokenValidator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factoryV2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_positionManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "baseTokens",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "amountToBorrow",
        type: "uint256",
      },
    ],
    name: "batchValidate",
    outputs: [
      {
        internalType: "enum ITokenValidator.Status[]",
        name: "isFotResults",
        type: "uint8[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "factoryV2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "positionManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "uniswapV2Call",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "baseTokens",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "amountToBorrow",
        type: "uint256",
      },
    ],
    name: "validate",
    outputs: [
      {
        internalType: "enum ITokenValidator.Status",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b50604051610f23380380610f2383398101604081905261002f91610069565b6001600160601b0319606092831b8116608052911b1660a05261009b565b80516001600160a01b038116811461006457600080fd5b919050565b6000806040838503121561007b578182fd5b6100848361004d565b91506100926020840161004d565b90509250929050565b60805160601c60a05160601c610e5f6100c46000398061038152508061035d5250610e5f6000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806368e0d4e11161005057806368e0d4e1146100aa578063791b98bc146100bf578063be7672e5146100c757610067565b80630143aace1461006c57806310d1e85c14610095575b600080fd5b61007f61007a366004610a10565b6100e7565b60405161008c9190610c5a565b60405180910390f35b6100a86100a3366004610a6a565b61016c565b005b6100b261035b565b60405161008c9190610bfb565b6100b261037f565b6100da6100d5366004610afb565b6103a3565b60405161008c9190610c0f565b6000805b8381101561015e5760006101208787878581811061010557fe5b905060200201602081019061011a91906109d8565b86610461565b9050600181600281111561013057fe5b14806101475750600281600281111561014557fe5b145b156101555791506101649050565b506001016100eb565b50600090505b949350505050565b6000339050600080826001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156101ad57600080fd5b505afa1580156101c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e591906109f4565b836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561021e57600080fd5b505afa158015610232573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025691906109f4565b915091506000808811610269578161026b565b825b905060008061027c87890189610b84565b91509150600082846001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016102af9190610bfb565b60206040518083038186803b1580156102c757600080fd5b505afa1580156102db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff9190610b6c565b0390508181146103435760408051808201825260038152621193d560ea1b6020820152905162461bcd60e51b815261033a9190600401610c6e565b60405180910390fd5b60405162461bcd60e51b815260040161033a90610c81565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60608467ffffffffffffffff811180156103bc57600080fd5b506040519080825280602002602001820160405280156103e6578160200160208202803683370190505b50905060005b858110156104575761042087878381811061040357fe5b905060200201602081019061041891906109d8565b8686866100e7565b82828151811061042c57fe5b6020026020010190600281111561043f57fe5b9081600281111561044c57fe5b9052506001016103ec565b5095945050505050565b6000826001600160a01b0316846001600160a01b031614156104855750600061079e565b6000610502306001600160a01b03166368e0d4e16040518163ffffffff1660e01b815260040160206040518083038186803b1580156104c357600080fd5b505afa1580156104d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fb91906109f4565b86866107a5565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f0dfe16810000000000000000000000000000000000000000000000000000000017905290519192506000916001600160a01b0384169161057491610bdf565b6000604051808303816000865af19150503d80600081146105b1576040519150601f19603f3d011682016040523d82523d6000602084013e6105b6565b606091505b509150508051600014156105cf5760009250505061079e565b6000818060200190518101906105e591906109f4565b9050600080826001600160a01b0316896001600160a01b03161461060b5760008761060f565b8660005b915091506000896001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016106419190610bfb565b60206040518083038186803b15801561065957600080fd5b505afa15801561066d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106919190610b6c565b90506000869050806001600160a01b031663022c0d9f858530868e6040516020016106bd929190610cef565b6040516020818303038152906040526040518563ffffffff1660e01b81526004016106eb9493929190610cfd565b600060405180830381600087803b15801561070557600080fd5b505af1925050508015610716575060015b61078657610722610d6b565b8061072d575061077c565b6107368161087d565b1561074c5760019850505050505050505061079e565b610755816108c6565b1561076b5760029850505050505050505061079e565b60009850505050505050505061079e565b3d6000803e3d6000fd5b60405162461bcd60e51b815260040161033a90610cb8565b9392505050565b60008060006107b48585610932565b604080516bffffffffffffffffffffffff19606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401529a90941b9093166069840152607d8301989098527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b6040805180820190915260038152621193d560ea1b6020918201528151908201207f0d441c7cb74abc94cc606c98870ca9174ef5b167b2f7ffed505658cf4574b003145b919050565b60408051808201909152600f8082527f5452414e534645525f4641494c4544000000000000000000000000000000000060208301528251600092918082101561091557600093505050506108c1565b602092830181902091819003850190920191909120149050919050565b600080826001600160a01b0316846001600160a01b0316141561095457600080fd5b826001600160a01b0316846001600160a01b031610610974578284610977565b83835b90925090506001600160a01b03821661098f57600080fd5b9250929050565b60008083601f8401126109a7578182fd5b50813567ffffffffffffffff8111156109be578182fd5b602083019150836020808302850101111561098f57600080fd5b6000602082840312156109e9578081fd5b813561079e81610e11565b600060208284031215610a05578081fd5b815161079e81610e11565b60008060008060608587031215610a25578283fd5b8435610a3081610e11565b9350602085013567ffffffffffffffff811115610a4b578384fd5b610a5787828801610996565b9598909750949560400135949350505050565b600080600080600060808688031215610a81578081fd5b8535610a8c81610e11565b94506020860135935060408601359250606086013567ffffffffffffffff80821115610ab6578283fd5b818801915088601f830112610ac9578283fd5b813581811115610ad7578384fd5b896020828501011115610ae8578384fd5b9699959850939650602001949392505050565b600080600080600060608688031215610b12578081fd5b853567ffffffffffffffff80821115610b29578283fd5b610b3589838a01610996565b90975095506020880135915080821115610b4d578283fd5b50610b5a88828901610996565b96999598509660400135949350505050565b600060208284031215610b7d578081fd5b5051919050565b60008060408385031215610b96578182fd5b50508035926020909101359150565b60008151808452610bbd816020860160208601610d35565b601f01601f19169290920160200192915050565b60038110610bdb57fe5b9052565b60008251610bf1818460208701610d35565b9190910192915050565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b81811015610c4e57610c3e838551610bd1565b9284019291840191600101610c2b565b50909695505050505050565b60208101610c688284610bd1565b92915050565b60006020825261079e6020830184610ba5565b60208082526007908201527f556e6b6e6f776e00000000000000000000000000000000000000000000000000604082015260600190565b60208082526010908201527f556e6578706563746564206572726f7200000000000000000000000000000000604082015260600190565b918252602082015260400190565b60008582528460208301526001600160a01b038416604083015260806060830152610d2b6080830184610ba5565b9695505050505050565b60005b83811015610d50578181015183820152602001610d38565b83811115610d5f576000848401525b50505050565b60e01c90565b600060443d1015610d7b57610e0e565b600481823e6308c379a0610d8f8251610d65565b14610d9957610e0e565b6040513d600319016004823e80513d67ffffffffffffffff8160248401118184111715610dc95750505050610e0e565b82840192508251915080821115610de35750505050610e0e565b503d83016020828401011115610dfb57505050610e0e565b601f01601f191681016020016040529150505b90565b6001600160a01b0381168114610e2657600080fd5b5056fea2646970667358221220f35cdf569e5543dfd622a88df6b943209d43fb91caebc1aa9eea6f5d1810a54964736f6c63430007060033";

type TokenValidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenValidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenValidator__factory extends ContractFactory {
  constructor(...args: TokenValidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _factoryV2: PromiseOrValue<string>,
    _positionManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenValidator> {
    return super.deploy(
      _factoryV2,
      _positionManager,
      overrides || {}
    ) as Promise<TokenValidator>;
  }
  override getDeployTransaction(
    _factoryV2: PromiseOrValue<string>,
    _positionManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _factoryV2,
      _positionManager,
      overrides || {}
    );
  }
  override attach(address: string): TokenValidator {
    return super.attach(address) as TokenValidator;
  }
  override connect(signer: Signer): TokenValidator__factory {
    return super.connect(signer) as TokenValidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenValidatorInterface {
    return new utils.Interface(_abi) as TokenValidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenValidator {
    return new Contract(address, _abi, signerOrProvider) as TokenValidator;
  }
}
