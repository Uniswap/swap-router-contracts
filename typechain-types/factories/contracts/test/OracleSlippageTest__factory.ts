/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  OracleSlippageTest,
  OracleSlippageTestInterface,
} from "../../../contracts/test/OracleSlippageTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "_WETH9",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "WETH9",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "paths",
        type: "bytes[]",
      },
      {
        internalType: "uint128[]",
        name: "amounts",
        type: "uint128[]",
      },
      {
        internalType: "uint24",
        name: "maximumTickDivergence",
        type: "uint24",
      },
      {
        internalType: "uint32",
        name: "secondsAgo",
        type: "uint32",
      },
    ],
    name: "checkOracleSlippage",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "path",
        type: "bytes",
      },
      {
        internalType: "uint24",
        name: "maximumTickDivergence",
        type: "uint24",
      },
      {
        internalType: "uint32",
        name: "secondsAgo",
        type: "uint32",
      },
    ],
    name: "checkOracleSlippage",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IUniswapV3Pool",
        name: "pool",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24",
      },
    ],
    name: "registerPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_time",
        type: "uint256",
      },
    ],
    name: "setTime",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IUniswapV3Pool",
        name: "pool",
        type: "address",
      },
    ],
    name: "testGetBlockStartingAndCurrentTick",
    outputs: [
      {
        internalType: "int24",
        name: "blockStartingTick",
        type: "int24",
      },
      {
        internalType: "int24",
        name: "currentTick",
        type: "int24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "paths",
        type: "bytes[]",
      },
      {
        internalType: "uint128[]",
        name: "amounts",
        type: "uint128[]",
      },
      {
        internalType: "uint32",
        name: "secondsAgo",
        type: "uint32",
      },
    ],
    name: "testGetSyntheticTicks",
    outputs: [
      {
        internalType: "int256",
        name: "averageSyntheticAverageTick",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "averageSyntheticCurrentTick",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "path",
        type: "bytes",
      },
      {
        internalType: "uint32",
        name: "secondsAgo",
        type: "uint32",
      },
    ],
    name: "testGetSyntheticTicks",
    outputs: [
      {
        internalType: "int256",
        name: "syntheticAverageTick",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "syntheticCurrentTick",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b506040516200189238038062001892833981016040819052620000349162000070565b6001600160601b0319606092831b8116608052911b1660a052620000a7565b80516001600160a01b03811681146200006b57600080fd5b919050565b6000806040838503121562000083578182fd5b6200008e8362000053565b91506200009e6020840162000053565b90509250929050565b60805160601c60a05160601c6117c1620000d16000398061021c52508061025552506117c16000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063ac810c6c11610076578063eaea4bfc1161005b578063eaea4bfc14610138578063efdeed8e1461014b578063f25801a71461015e576100a3565b8063ac810c6c1461010f578063c45a015514610130576100a3565b80630f64f6a9146100a85780631d31557e146100bd5780633beb26c4146100e75780634aa4a4fc146100fa575b600080fd5b6100bb6100b63660046114ce565b610171565b005b6100d06100cb366004611391565b6101fb565b6040516100de929190611654565b60405180910390f35b6100bb6100f53660046115be565b610215565b61010261021a565b6040516100de919061162c565b61012261011d3660046114ab565b61023e565b6040516100de929190611640565b610102610253565b6100d061014636600461145b565b610277565b6100bb61015936600461130d565b61028f565b6100bb61016c366004611406565b6102d8565b6001600160a01b0392831660008181526020818152604080832095871680845295825280832062ffffff9095168084529482528083208054979098167fffffffffffffffffffffffff000000000000000000000000000000000000000097881681179098559482528181528482209282529182528381209281529190522080549091169091179055565b600080610209858585610316565b91509150935093915050565b600155565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008061024a83610529565b91509150915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806102848484610766565b915091509250929050565b60008061029d868685610316565b915091508362ffffff16818303126102d05760405162461bcd60e51b81526004016102c7906116d0565b60405180910390fd5b505050505050565b6000806102e58584610766565b915091508362ffffff168183031261030f5760405162461bcd60e51b81526004016102c7906116d0565b5050505050565b600080835185511461032757600080fd5b6000855167ffffffffffffffff8111801561034157600080fd5b5060405190808252806020026020018201604052801561037b57816020015b61036861117e565b8152602001906001900390816103605790505b5090506000865167ffffffffffffffff8111801561039857600080fd5b506040519080825280602002602001820160405280156103d257816020015b6103bf61117e565b8152602001906001900390816103b75790505b50905060005b8751811015610502576000806104018a84815181106103f357fe5b602002602001015189610766565b9150915061040e8261093d565b85848151811061041a57fe5b60200260200101516000019060020b908160020b8152505061043b8161093d565b84848151811061044757fe5b60200260200101516000019060020b908160020b8152505088838151811061046b57fe5b602002602001015185848151811061047f57fe5b6020026020010151602001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff16815250508883815181106104c157fe5b60200260200101518484815181106104d557fe5b6020908102919091018101516fffffffffffffffffffffffffffffffff90921691015250506001016103d8565b5061050c82610953565b60020b935061051a81610953565b60020b92505050935093915050565b600080600080846001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561056857600080fd5b505afa15801561057c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a09190611527565b50939750919550935050600161ffff84161191506105d290505760405162461bcd60e51b81526004016102c790611699565b600080866001600160a01b031663252c09d7856040518263ffffffff1660e01b81526004016106019190611707565b60806040518083038186803b15801561061957600080fd5b505afa15801561062d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065191906115d6565b50509150915061065f610a21565b63ffffffff168263ffffffff16146106795784955061075d565b60008361ffff1660018561ffff168761ffff1601038161069557fe5b06905060008060008a6001600160a01b031663252c09d7856040518263ffffffff1660e01b81526004016106c99190611716565b60806040518083038186803b1580156106e157600080fd5b505afa1580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071991906115d6565b935050925092508061073d5760405162461bcd60e51b81526004016102c790611662565b82860363ffffffff811683870360060b8161075457fe5b059a5050505050505b50505050915091565b60008060008061077586610a27565b90506000805b8281101561091e5760008060006107918b610a34565b92509250925060006107a4848484610a65565b905060008063ffffffff8d166107cd576107bd83610529565b600291820b9350900b9050610862565b6107d7838e610a9d565b8160020b91505080925050826001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561081b57600080fd5b505afa15801561082f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108539190611527565b50505060029290920b93505050505b6001890387141561088957846001600160a01b0316866001600160a01b0316109950610898565b6108928e610e5e565b9d508597505b60008715806108eb5750866001600160a01b0316896001600160a01b0316106108d557866001600160a01b0316866001600160a01b0316106108eb565b856001600160a01b0316876001600160a01b0316105b90508015610900579b82019b9a81019a61090b565b828d039c50818c039b505b50506001909501945061077b9350505050565b50826109335760001985029450600019840293505b5050509250929050565b80600281900b811461094e57600080fd5b919050565b6000806000805b84518110156109e85784818151811061096f57fe5b6020026020010151602001516fffffffffffffffffffffffffffffffff1685828151811061099957fe5b60200260200101516000015160020b02830192508481815181106109b957fe5b6020026020010151602001516fffffffffffffffffffffffffffffffff1682019150808060010191505061095a565b508082816109f257fe5b059250600082128015610a0d5750808281610a0957fe5b0715155b15610a1a57600019909201915b5050919050565b60015490565b5160176013199091010490565b60008080610a428482610e7b565b9250610a4f846014610f47565b9050610a5c846017610e7b565b91509193909250565b6001600160a01b03928316600090815260208181526040808320948616835293815283822062ffffff90931682529190915220541690565b60008063ffffffff8316610af8576040805162461bcd60e51b815260206004820152600260248201527f4250000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6040805160028082526060820183526000926020830190803683370190505090508381600081518110610b2757fe5b602002602001019063ffffffff16908163ffffffff1681525050600081600181518110610b5057fe5b63ffffffff9092166020928302919091018201526040517f883bdbfd0000000000000000000000000000000000000000000000000000000081526004810182815283516024830152835160009384936001600160a01b038b169363883bdbfd9388939192839260449091019185820191028083838b5b83811015610bde578181015183820152602001610bc6565b505050509050019250505060006040518083038186803b158015610c0157600080fd5b505afa158015610c15573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040908152811015610c3e57600080fd5b8101908080516040519392919084640100000000821115610c5e57600080fd5b908301906020820185811115610c7357600080fd5b8251866020820283011164010000000082111715610c9057600080fd5b82525081516020918201928201910280838360005b83811015610cbd578181015183820152602001610ca5565b5050505090500160405260200180516040519392919084640100000000821115610ce657600080fd5b908301906020820185811115610cfb57600080fd5b8251866020820283011164010000000082111715610d1857600080fd5b82525081516020918201928201910280838360005b83811015610d45578181015183820152602001610d2d565b5050505090500160405250505091509150600082600081518110610d6557fe5b602002602001015183600181518110610d7a57fe5b6020026020010151039050600082600081518110610d9457fe5b602002602001015183600181518110610da957fe5b60200260200101510390508763ffffffff168260060b81610dc657fe5b05965060008260060b128015610df057508763ffffffff168260060b81610de957fe5b0760060b15155b15610dfd57600019909601955b63ffffffff88166001600160a01b030277ffffffffffffffffffffffffffffffffffffffff00000000602083901b1677ffffffffffffffffffffffffffffffffffffffffffffffff821681610e4e57fe5b0496505050505050509250929050565b8051606090610e7590839060179060161901611003565b92915050565b600081826014011015610ed5576040805162461bcd60e51b815260206004820152601260248201527f746f416464726573735f6f766572666c6f770000000000000000000000000000604482015290519081900360640190fd5b8160140183511015610f2e576040805162461bcd60e51b815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b600081826003011015610fa1576040805162461bcd60e51b815260206004820152601160248201527f746f55696e7432345f6f766572666c6f77000000000000000000000000000000604482015290519081900360640190fd5b8160030183511015610ffa576040805162461bcd60e51b815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e6473000000000000000000000000604482015290519081900360640190fd5b50016003015190565b60608182601f01101561105d576040805162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b8282840110156110b4576040805162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b8183018451101561110c576040805162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b60608215801561112b5760405191506000825260208201604052611175565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561116457805183526020928301920161114c565b5050858452601f01601f1916604052505b50949350505050565b604080518082019091526000808252602082015290565b600082601f8301126111a5578081fd5b813560206111ba6111b583611743565b61171f565b82815281810190858301855b858110156111ef576111dd898684358b0101611283565b845292840192908401906001016111c6565b5090979650505050505050565b600082601f83011261120c578081fd5b8135602061121c6111b583611743565b8281528181019085830183850287018401881015611238578586fd5b855b858110156111ef5781356fffffffffffffffffffffffffffffffff81168114611261578788fd5b8452928401929084019060010161123a565b8051801515811461094e57600080fd5b600082601f830112611293578081fd5b813567ffffffffffffffff8111156112a757fe5b6112ba601f8201601f191660200161171f565b8181528460208386010111156112ce578283fd5b816020850160208301379081016020019190915292915050565b805161ffff8116811461094e57600080fd5b803562ffffff8116811461094e57600080fd5b60008060008060808587031215611322578384fd5b843567ffffffffffffffff80821115611339578586fd5b61134588838901611195565b9550602087013591508082111561135a578485fd5b50611367878288016111fc565b935050611376604086016112fa565b9150606085013561138681611779565b939692955090935050565b6000806000606084860312156113a5578283fd5b833567ffffffffffffffff808211156113bc578485fd5b6113c887838801611195565b945060208601359150808211156113dd578384fd5b506113ea868287016111fc565b92505060408401356113fb81611779565b809150509250925092565b60008060006060848603121561141a578283fd5b833567ffffffffffffffff811115611430578384fd5b61143c86828701611283565b93505061144b602085016112fa565b915060408401356113fb81611779565b6000806040838503121561146d578182fd5b823567ffffffffffffffff811115611483578283fd5b61148f85828601611283565b92505060208301356114a081611779565b809150509250929050565b6000602082840312156114bc578081fd5b81356114c781611761565b9392505050565b600080600080608085870312156114e3578384fd5b84356114ee81611761565b935060208501356114fe81611761565b9250604085013561150e81611761565b915061151c606086016112fa565b905092959194509250565b600080600080600080600060e0888a031215611541578485fd5b875161154c81611761565b8097505060208801518060020b8114611563578586fd5b9550611571604089016112e8565b945061157f606089016112e8565b935061158d608089016112e8565b925060a088015160ff811681146115a2578283fd5b91506115b060c08901611273565b905092959891949750929550565b6000602082840312156115cf578081fd5b5035919050565b600080600080608085870312156115eb578182fd5b84516115f681611779565b8094505060208501518060060b811461160d578283fd5b604086015190935061161e81611761565b915061151c60608601611273565b6001600160a01b0391909116815260200190565b600292830b8152910b602082015260400190565b918252602082015260400190565b60208082526003908201527f4f4e490000000000000000000000000000000000000000000000000000000000604082015260600190565b60208082526003908201527f4e454f0000000000000000000000000000000000000000000000000000000000604082015260600190565b60208082526002908201527f5444000000000000000000000000000000000000000000000000000000000000604082015260600190565b61ffff91909116815260200190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561173b57fe5b604052919050565b600067ffffffffffffffff82111561175757fe5b5060209081020190565b6001600160a01b038116811461177657600080fd5b50565b63ffffffff8116811461177657600080fdfea2646970667358221220bb015579fcd021c108b90e7adab74a97a9d9538b352f410bd5cc1f9aad0848c164736f6c63430007060033";

type OracleSlippageTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OracleSlippageTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OracleSlippageTest__factory extends ContractFactory {
  constructor(...args: OracleSlippageTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _factory: PromiseOrValue<string>,
    _WETH9: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OracleSlippageTest> {
    return super.deploy(
      _factory,
      _WETH9,
      overrides || {}
    ) as Promise<OracleSlippageTest>;
  }
  override getDeployTransaction(
    _factory: PromiseOrValue<string>,
    _WETH9: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_factory, _WETH9, overrides || {});
  }
  override attach(address: string): OracleSlippageTest {
    return super.attach(address) as OracleSlippageTest;
  }
  override connect(signer: Signer): OracleSlippageTest__factory {
    return super.connect(signer) as OracleSlippageTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleSlippageTestInterface {
    return new utils.Interface(_abi) as OracleSlippageTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OracleSlippageTest {
    return new Contract(address, _abi, signerOrProvider) as OracleSlippageTest;
  }
}
