/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockObservations,
  MockObservationsInterface,
} from "../../../contracts/test/MockObservations";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32[3]",
        name: "blockTimestamps",
        type: "uint32[3]",
      },
      {
        internalType: "int24[3]",
        name: "ticks",
        type: "int24[3]",
      },
      {
        internalType: "bool",
        name: "mockLowObservationCardinality",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "observations",
    outputs: [
      {
        internalType: "uint32",
        name: "blockTimestamp",
        type: "uint32",
      },
      {
        internalType: "int56",
        name: "tickCumulative",
        type: "int56",
      },
      {
        internalType: "uint160",
        name: "secondsPerLiquidityCumulativeX128",
        type: "uint160",
      },
      {
        internalType: "bool",
        name: "initialized",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "secondsAgos",
        type: "uint32[]",
      },
    ],
    name: "observe",
    outputs: [
      {
        internalType: "int56[]",
        name: "tickCumulatives",
        type: "int56[]",
      },
      {
        internalType: "uint160[]",
        name: "secondsPerLiquidityCumulativeX128s",
        type: "uint160[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "slot0",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610e65380380610e65833981810160405260e081101561003357600080fd5b5060c0810151815160608301919063ffffffff161561007d576040805162461bcd60e51b81526020600482015260016024820152600360fc1b604482015290519081900360640190fd5b602083015163ffffffff166100bd576040805162461bcd60e51b81526020600482015260016024820152603160f81b604482015290519081900360640190fd5b6020830151604084015163ffffffff918216911611610107576040805162461bcd60e51b81526020600482015260016024820152601960f91b604482015290519081900360640190fd5b6000805b600381101561026157801561016f57600084600183036003811061012b57fe5b60200201519050600086600184036003811061014357fe5b602002015187846003811061015457fe5b60200201510390508063ffffffff168260020b028401935050505b604051806080016040528086836003811061018657fe5b602002015163ffffffff1681526020018360060b8152602001826001600160a01b031681526020016001151581525060018261ffff81106101c357fe5b825191018054602084015160408501516060909501511515600160f81b026001600160f81b036001600160a01b039096166b01000000000000000000000002600160581b600160f81b031960069390930b66ffffffffffffff166401000000000266ffffffffffffff60201b1963ffffffff90971663ffffffff1990951694909417959095169290921716929092179290921617905560010161010b565b5060408301516000805460029290920b62ffffff1662ffffff1990921691909117905581610290576003610293565b60015b6000805464ffff000000191660ff929092166301000000029190911761ffff60281b191665020000000000178155610b8f94508493506102d692509050396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063252c09d7146100465780633850c7bd1461009d578063883bdbfd146100f6575b600080fd5b6100636004803603602081101561005c57600080fd5b50356101ff565b6040805163ffffffff909516855260069390930b60208501526001600160a01b039091168383015215156060830152519081900360800190f35b6100a5610245565b604080516001600160a01b03909816885260029690960b602088015261ffff9485168787015292841660608701529216608085015260ff90911660a0840152151560c0830152519081900360e00190f35b6101666004803603602081101561010c57600080fd5b81019060208101813564010000000081111561012757600080fd5b82018360208201111561013957600080fd5b8035906020019184602083028401116401000000008311171561015b57600080fd5b509092509050610271565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156101aa578181015183820152602001610192565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156101e95781810151838201526020016101d1565b5050505090500194505050505060405180910390f35b60018161ffff811061021057600080fd5b015463ffffffff81169150640100000000810460060b90600160581b81046001600160a01b031690600160f81b900460ff1684565b60008054600281900b9061ffff6501000000000082048116916301000000900416838080919293949596565b6060806102e0600160020154604080516020808802828101820190935287825263ffffffff90931692909188918891829185019084908082843760009201829052508054600196959450600281900b935061ffff650100000000008204811693506301000000909104166102eb565b915091509250929050565b60608060008361ffff1611610347576040805162461bcd60e51b815260206004820152600160248201527f4900000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b865167ffffffffffffffff8111801561035f57600080fd5b50604051908082528060200260200182016040528015610389578160200160208202803683370190505b509150865167ffffffffffffffff811180156103a457600080fd5b506040519080825280602002602001820160405280156103ce578160200160208202803683370190505b50905060005b8751811015610454576103ff8a8a8a84815181106103ee57fe5b60200260200101518a8a8a8a610461565b84838151811061040b57fe5b6020026020010184848151811061041e57fe5b60200260200101826001600160a01b03166001600160a01b03168152508260060b60060b815250505080806001019150506103d4565b5097509795505050505050565b60008063ffffffff8716610508576000898661ffff1661ffff811061048257fe5b60408051608081018252919092015463ffffffff8082168084526401000000008304600690810b810b900b6020850152600160581b83046001600160a01b031694840194909452600160f81b90910460ff16151560608301529092508a16146104f4576104f1818a89886105f4565b90505b8060200151816040015192509250506105e8565b86880360008061051d8c8c858c8c8c8c6106b6565b91509150816000015163ffffffff168363ffffffff16141561054f5781602001518260400151945094505050506105e8565b805163ffffffff848116911614156105775780602001518160400151945094505050506105e8565b8151815160208085015190840151918390039286039163ffffffff80841692908516910360060b816105a557fe5b05028460200151018263ffffffff168263ffffffff1686604001518660400151036001600160a01b031602816105d757fe5b048560400151019650965050505050505b97509795505050505050565b6105fc610b32565b600085600001518503905060405180608001604052808663ffffffff1681526020018263ffffffff168660020b0288602001510160060b81526020016000856fffffffffffffffffffffffffffffffff161161065957600161065b565b845b6fffffffffffffffffffffffffffffffff1673ffffffff00000000000000000000000000000000608085901b168161068f57fe5b048860400151016001600160a01b0316815260200160011515815250915050949350505050565b6106be610b32565b6106c6610b32565b888561ffff1661ffff81106106d757fe5b60408051608081018252919092015463ffffffff81168083526401000000008204600690810b810b900b6020840152600160581b82046001600160a01b031693830193909352600160f81b900460ff1615156060820152925061073c908990896108cd565b15610774578663ffffffff16826000015163ffffffff16141561075e576105e8565b8161076b838989886105f4565b915091506105e8565b888361ffff168660010161ffff168161078957fe5b0661ffff1661ffff811061079957fe5b60408051608081018252929091015463ffffffff811683526401000000008104600690810b810b900b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b9091041615156060820181905290925061085057604080516080810182528a5463ffffffff811682526401000000008104600690810b810b900b6020830152600160581b81046001600160a01b031692820192909252600160f81b90910460ff161515606082015291505b61085f888360000151896108cd565b6108b0576040805162461bcd60e51b815260206004820152600360248201527f4f4c440000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6108bd8989898887610992565b9150915097509795505050505050565b60008363ffffffff168363ffffffff16111580156108f757508363ffffffff168263ffffffff1611155b15610913578163ffffffff168363ffffffff161115905061098b565b60008463ffffffff168463ffffffff161161093b578363ffffffff1664010000000001610943565b8363ffffffff165b64ffffffffff16905060008563ffffffff168463ffffffff1611610974578363ffffffff166401000000000161097c565b8363ffffffff165b64ffffffffff16909111159150505b9392505050565b61099a610b32565b6109a2610b32565b60008361ffff168560010161ffff16816109b857fe5b0661ffff169050600060018561ffff16830103905060005b506002818301048961ffff871682816109e557fe5b0661ffff81106109f157fe5b60408051608081018252929091015463ffffffff811683526401000000008104600690810b810b900b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b90910416151560608201819052909550610a5c578060010192506109d0565b898661ffff168260010181610a6d57fe5b0661ffff8110610a7957fe5b60408051608081018252929091015463ffffffff811683526401000000008104600690810b810b900b60208401526001600160a01b03600160581b8204169183019190915260ff600160f81b90910416151560608201528551909450600090610ae4908b908b6108cd565b9050808015610afd5750610afd8a8a87600001516108cd565b15610b085750610b25565b80610b1857600182039250610b1f565b8160010193505b506109d0565b5050509550959350505050565b6040805160808101825260008082526020820181905291810182905260608101919091529056fea26469706673582212203faf342b00e0c4729e506e6ed12b83ebda0f1ca89c833291bc62a6083ab8e5a864736f6c63430007060033";

type MockObservationsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockObservationsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockObservations__factory extends ContractFactory {
  constructor(...args: MockObservationsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    blockTimestamps: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    ticks: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    mockLowObservationCardinality: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockObservations> {
    return super.deploy(
      blockTimestamps,
      ticks,
      mockLowObservationCardinality,
      overrides || {}
    ) as Promise<MockObservations>;
  }
  override getDeployTransaction(
    blockTimestamps: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    ticks: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    mockLowObservationCardinality: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      blockTimestamps,
      ticks,
      mockLowObservationCardinality,
      overrides || {}
    );
  }
  override attach(address: string): MockObservations {
    return super.attach(address) as MockObservations;
  }
  override connect(signer: Signer): MockObservations__factory {
    return super.connect(signer) as MockObservations__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockObservationsInterface {
    return new utils.Interface(_abi) as MockObservationsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockObservations {
    return new Contract(address, _abi, signerOrProvider) as MockObservations;
  }
}
