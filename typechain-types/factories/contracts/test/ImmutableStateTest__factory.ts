/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ImmutableStateTest,
  ImmutableStateTestInterface,
} from "../../../contracts/test/ImmutableStateTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factoryV2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_positionManager",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "factoryV2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "positionManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b506040516101643803806101648339818101604052604081101561003357600080fd5b5080516020909101516001600160601b0319606092831b8116608052911b1660a05260805160601c60a05160601c60ea61007a600039806092525080606e525060ea6000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806368e0d4e1146037578063791b98bc146066575b600080fd5b603d606c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b603d6090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000008156fea26469706673582212207f40a9d614b1a507adb6a73de6b3513cd68653d1bc258d9dc4cd9e8812a4516264736f6c63430007060033";

type ImmutableStateTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ImmutableStateTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ImmutableStateTest__factory extends ContractFactory {
  constructor(...args: ImmutableStateTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _factoryV2: PromiseOrValue<string>,
    _positionManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ImmutableStateTest> {
    return super.deploy(
      _factoryV2,
      _positionManager,
      overrides || {}
    ) as Promise<ImmutableStateTest>;
  }
  override getDeployTransaction(
    _factoryV2: PromiseOrValue<string>,
    _positionManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _factoryV2,
      _positionManager,
      overrides || {}
    );
  }
  override attach(address: string): ImmutableStateTest {
    return super.attach(address) as ImmutableStateTest;
  }
  override connect(signer: Signer): ImmutableStateTest__factory {
    return super.connect(signer) as ImmutableStateTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ImmutableStateTestInterface {
    return new utils.Interface(_abi) as ImmutableStateTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ImmutableStateTest {
    return new Contract(address, _abi, signerOrProvider) as ImmutableStateTest;
  }
}
