/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestMulticallExtended,
  TestMulticallExtendedInterface,
} from "../../../contracts/test/TestMulticallExtended";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "functionThatReturnsTuple",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "a",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "b",
            type: "uint256",
          },
        ],
        internalType: "struct TestMulticallExtended.Tuple",
        name: "tuple",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "previousBlockhash",
        type: "bytes32",
      },
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_time",
        type: "uint256",
      },
    ],
    name: "setTime",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506106a5806100206000396000f3fe60806040526004361061005a5760003560e01c80633beb26c4116100435780633beb26c4146100b55780635ae401dc146100d7578063ac9650d8146100ea5761005a565b80631f0464d11461005f5780633b16a6a314610088575b600080fd5b61007261006d3660046103e2565b6100fd565b60405161007f9190610569565b60405180910390f35b34801561009457600080fd5b506100a86100a336600461050c565b61016b565b60405161007f91906105e3565b3480156100c157600080fd5b506100d56100d03660046104c3565b61018c565b005b6100726100e53660046104db565b610191565b6100726100f83660046103a2565b6101f0565b60608380600143034014610158576040805162461bcd60e51b815260206004820152600960248201527f426c6f636b686173680000000000000000000000000000000000000000000000604482015290519081900360640190fd5b61016284846101f0565b95945050505050565b61017361033f565b5060408051808201909152908152602081019190915290565b600055565b6060838061019d610339565b1115610158576040805162461bcd60e51b815260206004820152601360248201527f5472616e73616374696f6e20746f6f206f6c6400000000000000000000000000604482015290519081900360640190fd5b60608167ffffffffffffffff8111801561020957600080fd5b5060405190808252806020026020018201604052801561023d57816020015b60608152602001906001900390816102285790505b50905060005b82811015610332576000803086868581811061025b57fe5b905060200281019061026d91906105fa565b60405161027b929190610559565b600060405180830381855af49150503d80600081146102b6576040519150601f19603f3d011682016040523d82523d6000602084013e6102bb565b606091505b509150915081610310576044815110156102d457600080fd5b600481019050808060200190518101906102ee919061042c565b60405162461bcd60e51b815260040161030791906105c9565b60405180910390fd5b8084848151811061031d57fe5b60209081029190910101525050600101610243565b5092915050565b60005490565b604051806040016040528060008152602001600081525090565b60008083601f84011261036a578081fd5b50813567ffffffffffffffff811115610381578182fd5b602083019150836020808302850101111561039b57600080fd5b9250929050565b600080602083850312156103b4578182fd5b823567ffffffffffffffff8111156103ca578283fd5b6103d685828601610359565b90969095509350505050565b6000806000604084860312156103f6578081fd5b83359250602084013567ffffffffffffffff811115610413578182fd5b61041f86828701610359565b9497909650939450505050565b60006020828403121561043d578081fd5b815167ffffffffffffffff80821115610454578283fd5b818401915084601f830112610467578283fd5b81518181111561047357fe5b604051601f8201601f19168101602001838111828210171561049157fe5b6040528181528382016020018710156104a8578485fd5b6104b982602083016020870161063f565b9695505050505050565b6000602082840312156104d4578081fd5b5035919050565b6000806000604084860312156104ef578283fd5b83359250602084013567ffffffffffffffff811115610413578283fd5b6000806040838503121561051e578182fd5b50508035926020909101359150565b6000815180845261054581602086016020860161063f565b601f01601f19169290920160200192915050565b6000828483379101908152919050565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156105bc57603f198886030184526105aa85835161052d565b9450928501929085019060010161058e565b5092979650505050505050565b6000602082526105dc602083018461052d565b9392505050565b815181526020918201519181019190915260400190565b6000808335601e19843603018112610610578283fd5b83018035915067ffffffffffffffff82111561062a578283fd5b60200191503681900382131561039b57600080fd5b60005b8381101561065a578181015183820152602001610642565b83811115610669576000848401525b5050505056fea264697066735822122021a49940d3e5216993bc2350daef37d6c128e0ba2f9afeab5c6614a1362c530f64736f6c63430007060033";

type TestMulticallExtendedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestMulticallExtendedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestMulticallExtended__factory extends ContractFactory {
  constructor(...args: TestMulticallExtendedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestMulticallExtended> {
    return super.deploy(overrides || {}) as Promise<TestMulticallExtended>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestMulticallExtended {
    return super.attach(address) as TestMulticallExtended;
  }
  override connect(signer: Signer): TestMulticallExtended__factory {
    return super.connect(signer) as TestMulticallExtended__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestMulticallExtendedInterface {
    return new utils.Interface(_abi) as TestMulticallExtendedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestMulticallExtended {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestMulticallExtended;
  }
}
